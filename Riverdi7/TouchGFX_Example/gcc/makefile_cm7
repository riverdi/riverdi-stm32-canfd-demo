# Helper macros to convert spaces into question marks and back again
e :=
sp := $(e) $(e)
qs = $(subst ?,$(sp),$1)
sq = $(subst $(sp),?,$1)

# Get name of this Makefile (avoid getting word 0 and a starting space)
makefile_name := $(wordlist 1,1000,$(MAKEFILE_LIST))

# Get path of this Makefile
makefile_path := $(call qs,$(dir $(call sq,$(abspath $(call sq,$(makefile_name))))))

# Get path where the Application is
application_path := $(call qs,$(abspath $(call sq,$(makefile_path)..)))

# Change makefile_name to a relative path
makefile_name := $(subst $(call sq,$(application_path))/,,$(call sq,$(abspath $(call sq,$(makefile_name)))))

# Get relative path to makefile from application_path
makefile_path_relative := $(subst $(call sq,$(application_path))/,,$(call sq,$(abspath $(call sq,$(makefile_path)))))

# Get path to Middlewares
touchgfx_middlewares_path := gcc/Middlewares
cubemx_middlewares_path := Middlewares

# Get path to Drivers
Drivers_path := Drivers

# Get OS path
touchgfx_os_path := $(touchgfx_middlewares_path)/Third_Party/FreeRTOS
cubemx_os_path := $(cubemx_middlewares_path)/Third_Party/FreeRTOS
FatFS_os_path := $(cubemx_middlewares_path)/Third_Party/FatFs
LibJPEG_os_path := $(cubemx_middlewares_path)/Third_Party/LibJPEG
USB_Host_os_path := $(cubemx_middlewares_path)/ST/STM32_USB_Host_Library
# Get identification of this system
ifeq ($(OS),Windows_NT)
UNAME := MINGW32_NT-6.2
else
UNAME := $(shell uname -s)
endif

board_name := Riverdi_70STM32H7
platform := cortex_m7
cpp_compiler_options_local :=
c_compiler_options_local :=

.PHONY: all clean assets flash intflash

all: $(filter clean,$(MAKECMDGOALS))
all clean assets:
	@cd "$(application_path)" && $(MAKE) -r -f $(makefile_name) -s $(MFLAGS) _$@_

flash intflash: all
	@cd "$(application_path)" && $(MAKE) -r -f $(makefile_name) -s $(MFLAGS) _$@_

# Directories containing application-specific source and header files.
# Additional components can be added to this list. make will look for
# source files recursively in comp_name/src and setup an include directive
# for comp_name/include.
components := \
	CM7/TouchGFX/gui \
	CM7/TouchGFX/generated/gui_generated

touchgfx_generator_components := \
	CM7/TouchGFX/target \
	CM7/TouchGFX/App

# Location of folder containing bmp/png files.
asset_images_input  := CM7/TouchGFX/assets/images

# Location of folder to search for ttf font files
asset_fonts_input  := CM7/TouchGFX/assets/fonts

# Location of folder where the texts.xml is placed
asset_texts_input  := CM7/TouchGFX/assets/texts

build_root_path := CM7/TouchGFX/build
object_output_path := $(build_root_path)/$(board_name)
binary_output_path := $(build_root_path)/bin

# Location of output folders where autogenerated code from assets is placed
asset_root_path := CM7/TouchGFX/generated
asset_images_output := $(asset_root_path)/images
asset_fonts_output := $(asset_root_path)/fonts
asset_texts_output := $(asset_root_path)/texts

#include application specific configuration
include $(application_path)/CM7/TouchGFX/config/gcc/app.mk

# corrects TouchGFX Path
touchgfx_path := CM7/${subst ../,,$(touchgfx_path)}

os_source_files := \
	$(cubemx_os_path)/Source/croutine.c \
	$(cubemx_os_path)/Source/event_groups.c \
	$(cubemx_os_path)/Source/list.c \
	$(cubemx_os_path)/Source/queue.c \
	$(cubemx_os_path)/Source/stream_buffer.c \
	$(cubemx_os_path)/Source/tasks.c \
	$(cubemx_os_path)/Source/timers.c \
	$(cubemx_os_path)/Source/CMSIS_RTOS_V2/cmsis_os2.c

os_include_paths := \
	$(cubemx_os_path)/Source/include \
	$(cubemx_os_path)/Source/CMSIS_RTOS_V2 \
	$(touchgfx_os_path)/Source/portable/GCC/ARM_CM4F

os_source_files += \
	$(touchgfx_os_path)/Source/portable/MemMang/heap_4.c \
	$(touchgfx_os_path)/Source/portable/GCC/ARM_CM4F/port.c

os_include_paths += \
	$(FatFS_os_path)/src \
	$(USB_Host_os_path)/Core/Inc \
	$(USB_Host_os_path)/Class/MSC/Inc \
	$(LibJPEG_os_path)/include \
	$(touchgfx_os_path)/Source/portable/GCC/ARM_CM4F

ifeq ($(UNAME), Linux)
imageconvert_executable := $(touchgfx_path)/framework/tools/imageconvert/build/linux/imageconvert.out
fontconvert_executable := $(touchgfx_path)/framework/tools/fontconvert/build/linux/fontconvert.out
else
imageconvert_executable := $(touchgfx_path)/framework/tools/imageconvert/build/win/imageconvert.out
fontconvert_executable := $(touchgfx_path)/framework/tools/fontconvert/build/win/fontconvert.out

stldr := QSPI_STM32H747I-Riverdi-MICRON_V2.stldr
include $(application_path)/gcc/include/cube_programmer.mk

endif

target_executable := target.elf
target_hex := target.hex

assembler    := arm-none-eabi-gcc
c_compiler   := arm-none-eabi-gcc
cpp_compiler := arm-none-eabi-g++
linker       := arm-none-eabi-g++
objcopy      := arm-none-eabi-objcopy
archiver     := arm-none-eabi-ar
strip        := arm-none-eabi-strip

assembler_options += \
	-Wall \
	-fno-exceptions \
	-g3 \
	-mthumb \
	-MMD \
	-MP \
	-c \
	-x assembler-with-cpp

c_compiler_options += \
	-MMD \
	-MP \
	-Os \
	-Wall \
	-fdata-sections \
	-ffunction-sections \
	-fno-exceptions \
	-fstack-usage \
	-g3 \
	-mthumb \
	-std=gnu11

cpp_compiler_options += \
	-Os \
	-fdata-sections \
	-fno-exceptions \
	-fno-rtti \
	-g3 \
	-MMD \
	-MP \
	-Wall \
	-femit-class-debug-always \
	-ffunction-sections \
	-fno-use-cxa-atexit \
	-fstack-usage \
	-mthumb \
	-std=gnu++14

linker_options += \
	--specs=nosys.specs \
	-Wl,--gc-sections -static \
	-Wl,--start-group -lc -lm -lstdc++ -lsupc++ -Wl,--end-group \
	-fno-exceptions \
	-fno-rtti \
	-g3 \
	-mthumb

# Additional toolchain configuration for Cortex-M7 targets.
float_options := -mfpu=fpv5-d16 -mfloat-abi=hard

assembler_options    += $(float_options) -mcpu=cortex-m7 -DCORE_CM7
c_compiler_options   += $(float_options) -mcpu=cortex-m7 -DCORE_CM7
cpp_compiler_options += $(float_options) -mcpu=cortex-m7 -DCORE_CM7
linker_options       += $(float_options) -mcpu=cortex-m7

c_compiler_options   += -DST -DSTM32H747xx -DUSE_HAL_DRIVER -DUSE_FLOATING_POINT -DMICRON_QSPI -DUSE_PWR_LDO_SUPPLY__N -DUSE_FLOATING_POINT
cpp_compiler_options += -DST -DSTM32H747xx -DUSE_HAL_DRIVER -DUSE_FLOATING_POINT -DMICRON_QSPI -DUSE_PWR_LDO_SUPPLY__N -DUSE_FLOATING_POINT

# include everything + specific vendor folders
framework_includes := $(touchgfx_path)/framework/include

# this needs to change when assset include folder changes.
all_components := $(components) \
	$(asset_fonts_output) \
	$(asset_images_output) \
	$(asset_texts_output)

# keep framework include and source out of this mess! :)
include_paths := $(library_includes) \
	$(foreach comp, $(all_components), $(comp)/include) \
	$(foreach comp, $(touchgfx_generator_components), $(comp)/generated) \
	$(framework_includes) \
	$(cubemx_middlewares_path) \
	$(application_path)/Utilities/JPEG \
	$(application_path)/CM7/FATFS/App \
	$(application_path)/CM7/FATFS/Target \
	$(application_path)/CM7/USB_HOST/App \
	$(application_path)/CM7/USB_HOST/Target \
	$(application_path)/CM7/LIBJPEG/App \
	$(application_path)/CM7/LIBJPEG/Target \
	$(application_path)/CM7/TouchGFX/generated/videos/include \
	$(touchgfx_middlewares_path) \
	$(touchgfx_generator_components)

source_paths = $(foreach comp, $(all_components), $(comp)/src) \
	$(touchgfx_generator_components)

# Finds files that matches the specified pattern. The directory list
# is searched recursively. It is safe to invoke this function with an
# empty list of directories.
#
# Param $(1): List of directories to search
# Param $(2): The file pattern to search for
define find
	$(foreach dir,$(1),$(foreach d,$(wildcard $(dir)/*),\
		$(call find,$(d),$(2))) $(wildcard $(dir)/$(strip $(2))))
endef
unexport find

fontconvert_ttf_lower_files := $(call find, $(asset_fonts_input), *.ttf)
fontconvert_ttf_upper_files := $(call find, $(asset_fonts_input), *.TTF)
fontconvert_otf_lower_files := $(call find, $(asset_fonts_input), *.otf)
fontconvert_otf_upper_files := $(call find, $(asset_fonts_input), *.OTF)
fontconvert_bdf_lower_files := $(call find, $(asset_fonts_input), *.bdf)
fontconvert_bdf_upper_files := $(call find, $(asset_fonts_input), *.BDF)
fontconvert_font_files := \
	$(fontconvert_ttf_lower_files) \
	$(fontconvert_ttf_upper_files) \
	$(fontconvert_otf_lower_files) \
	$(fontconvert_otf_upper_files) \
	$(fontconvert_bdf_lower_files) \
	$(fontconvert_bdf_upper_files)

source_files := $(call find, $(source_paths),*.cpp)




# Drivers/STM32H7xx_HAL_Driver
board_c_files += \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_crc.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_crc_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma2d.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dsi.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_exti.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_hsem.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_ltdc.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_ltdc_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_qspi.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sdram.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_hcd.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_fdcan.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dac.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dac_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_spi.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_spi_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_lptim.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rng.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rng_ex.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_jpeg.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_usb.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_sdmmc.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_delayblock.c \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_fmc.c
#	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nor.c \
#	$(Drivers_path)/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sram.c \

board_c_files += \
	CM7/Core/Src/main.c \
	CM7/Core/Src/adc.c \
	CM7/Core/Src/crc.c \
	CM7/Core/Src/dac.c \
	CM7/Core/Src/dfsdm.c \
	CM7/Core/Src/dma2d.c \
	CM7/Core/Src/dsihost.c \
	CM7/Core/Src/fdcan.c \
	CM7/Core/Src/fmc.c \
	CM7/Core/Src/freertos.c \
	CM7/Core/Src/gpio.c \
	CM7/Core/Src/i2c.c \
	CM7/Core/Src/jpeg.c \
	CM7/Core/Src/lptim.c \
	CM7/Core/Src/ltdc.c \
	CM7/Core/Src/mdma.c \
	CM7/Core/Src/quadspi.c \
	CM7/Core/Src/rng.c \
	CM7/Core/Src/sdmmc.c \
	CM7/Core/Src/spi.c \
	CM7/Core/Src/tim.c \
	CM7/Core/Src/rtc.c \
	CM7/Core/Src/usart.c \
	CM7/Core/Src/stm32h7xx_it.c \
	CM7/Core/Src/stm32h7xx_hal_msp.c \
	CM7/Core/Src/stm32h7xx_hal_timebase_tim.c \
	CM7/USB_HOST/App/usb_host.c \
	CM7/USB_HOST/Target/usbh_conf.c \
	CM7/USB_HOST/Target/usbh_platform.c \
	CM7/FATFS/App/fatfs.c \
	CM7/FATFS/Target/sd_diskio.c \
	CM7/FATFS/Target/bsp_driver_sd.c \
	CM7/FATFS/Target/fatfs_platform.c \
	$(FatFS_os_path)/src/ff_gen_drv.c \
	$(USB_Host_os_path)/Core/src/usbh_core.c \
	$(USB_Host_os_path)/Core/src/usbh_ctlreq.c \
	$(USB_Host_os_path)/Core/src/usbh_ioreq.c \
	$(USB_Host_os_path)/Core/src/usbh_pipes.c \
	$(USB_Host_os_path)/Class/MSC/src/usbh_msc.c \
	$(USB_Host_os_path)/Class/MSC/src/usbh_msc_bot.c \
	$(USB_Host_os_path)/Class/MSC/src/usbh_msc_scsi.c \
	Utilities/JPEG/jpeg_utils.c \
  #  CM7/TouchGFX/App/app_touchgfx.c

board_c_files += \
	Common/Src/system_stm32h7xx_dualcore_boot_cm4_cm7.c \

# Drivers
board_include_paths := \
	$(Drivers_path)/BSP/Components/Common \
	$(Drivers_path)/CMSIS/Include \
	$(Drivers_path)/CMSIS/Device/ST/STM32H7xx/Include \
	$(Drivers_path)/STM32H7xx_HAL_Driver/Inc \
	CM7/Core/Inc

asm_source_files := \
	STM32CubeIDE/CM7/Application/User/Startup/startup_stm32h747xihx.s

include_paths += platform/os $(board_include_paths) $(os_include_paths)

c_source_files := $(call find, $(source_paths),*.c) $(os_source_files) $(board_c_files)
source_files += $(board_cpp_files)
object_files := $(source_files) $(c_source_files)

# start converting paths
object_files := $(object_files:$(touchgfx_path)/%.cpp=$(object_output_path)/touchgfx/%.o)
object_files := $(object_files:%.cpp=$(object_output_path)/%.o)
object_files := $(object_files:$(touchgfx_middlewares_path)/%.c=$(object_output_path)/$(touchgfx_middlewares_path)/%.o)
object_files := $(object_files:$(cubemx_middlewares_path)/%.c=$(object_output_path)/$(cubemx_middlewares_path)/%.o)
object_files := $(object_files:$(Drivers_path)/%.c=$(object_output_path)/Drivers/%.o)
object_files := $(object_files:%.c=$(object_output_path)/%.o)


object_files := $(object_files:$(touchgfx_path)/%.cpp=$(object_output_path)/touchgfx/%.o)
object_files := $(object_files:%.cpp=$(object_output_path)/%.o)
object_files := $(object_files:$(Middlewares_path)/%.c=$(object_output_path)/Middlewares/%.o)
object_files := $(object_files:$(Drivers_path)/%.c=$(object_output_path)/Drivers/%.o)
object_files_video := $(application_path)/CM7/TouchGFX/generated/videos/obj/*.bin.o


	

# remove templates files
object_files := $(filter-out %template.o,$(object_files))

dependency_files := $(object_files:%.o=%.d)

object_asm_files := $(asm_source_files:%.s=$(object_output_path)/%.o)
object_asm_files := $(patsubst $(object_output_path)/%,$(object_output_path)/%,$(object_asm_files))

textconvert_script_path := $(touchgfx_path)/framework/tools/textconvert
textconvert_executable := $(call find, $(textconvert_script_path), *.rb)

text_database := $(asset_texts_input)/texts.xml

libraries := touchgfx-float-abi-hard
library_include_paths := $(touchgfx_path)/lib/core/$(platform)/gcc

.PHONY: _all_ _clean_ _assets_ _flash_ _intflash_ generate_assets build_executable

# Force linking each time
.PHONY: $(binary_output_path)/$(target_executable)

_all_: generate_assets

# if ExtFlashSection or FontFlashSection is detected inside the executable, enable external flash
flash_section_count := 0
elf_filename := "$(application_path)/$(binary_output_path)/$(target_executable)"
ifeq ($(shell test -e $(elf_filename) && echo -n has_elf_file),has_elf_file)
flash_section_count := $(shell readelf -S $(elf_filename) | grep FlashSection | wc -l)
endif

ifeq ($(shell test $(flash_section_count) -gt 0; echo $$?),0)
_flash_: _extflash_
_flash_: _intflash_
else
_flash_: _intflash_
endif

include $(application_path)/gcc/include/flash_sections_int_ext.mk

generate_assets: _assets_
	@$(MAKE) -f $(makefile_name) -r -s $(MFLAGS) build_executable
build_executable: $(binary_output_path)/$(target_executable)

$(binary_output_path)/$(target_executable): $(object_files) $(object_asm_files)
	# @echo $(object_files)
	# @echo $(object_files_video)	
	# @echo $(stldr)	
	# @echo $(st_stm32cube_external_loader)	
	@echo Linking $(@)
	@mkdir -p $(@D)
	@mkdir -p $(object_output_path)


ifeq ($(shell test -e $(st_stm32cube_external_loader) && echo -n yes),yes)
	@cp $(application_path)/STM32CubeIDE\CM7\Stldr\$(stldr)  $(st_stm32cube_external_loader)
endif



ifeq ($(shell test -e $(object_files_video) && echo -n yes),yes)
	@$(file >$(build_root_path)/objects.tmp) $(foreach F,$(object_files),$(file >>$(build_root_path)/objects.tmp,$F))
	@$(linker) \
		$(linker_options) $(object_files_video) -T $(makefile_path_relative)/STM32H747XIHx_FLASH_CM7.ld -Wl,-Map=$(@D)/application.map $(linker_options_local) \
		$(patsubst %,-L%,$(library_include_paths)) \
		@$(build_root_path)/objects.tmp $(object_asm_files) -o $@ \
		-Wl,--start-group $(patsubst %,-l%,$(libraries)) -Wl,--end-group
else
	@$(file >$(build_root_path)/objects.tmp) $(foreach F,$(object_files),$(file >>$(build_root_path)/objects.tmp,$F))
	@$(linker) \
		$(linker_options) -T $(makefile_path_relative)/STM32H747XIHx_FLASH_CM7.ld -Wl,-Map=$(@D)/application.map $(linker_options_local) \
		$(patsubst %,-L%,$(library_include_paths)) \
		@$(build_root_path)/objects.tmp $(object_asm_files) -o $@ \
		-Wl,--start-group $(patsubst %,-l%,$(libraries)) -Wl,--end-group
endif

	@rm -f $(build_root_path)/objects.tmp
	@echo "Producing additional output formats..."
	@echo "  target.hex   - Combined internal+external hex"
	@$(objcopy) -O ihex $@ $(@D)/target.hex
	@echo "  intflash.elf - Internal flash, elf debug"
	@$(objcopy) --remove-section=ExtFlashSection --remove-section=TouchGFX_Framebuffer  --remove-section=BufferSection $@ $(@D)/intflash.elf 2>/dev/null
	@echo "  intflash.hex - Internal flash, hex"
	@$(objcopy) -O ihex --remove-section=ExtFlashSection --remove-section=TouchGFX_Framebuffer --remove-section=BufferSection $@ $(@D)/intflash.hex
	# re-enable if extflash binaries are required in your workflow
	@echo "  extflash.bin - External flash, binary"
	@$(objcopy) -O binary --only-section=ExtFlashSection  $@ $(@D)/extflash.bin
	@$(objcopy) -O ihex --only-section=ExtFlashSection  $@ $(@D)/extflash.hex

$(application_path)/CM7/TouchGFX/generated/videos/obj/%.o): %.s CM7/TouchGFX/config/gcc/app.mk
	@echo Compiling ASM $<
	@mkdir -p $(@D)
	@$(assembler) \
		$(assembler_options) \
		$(patsubst %,-I %,$(os_include_paths)) \
		-c $< -o $@
	@echo Linking2 $(@)
$(object_output_path)/touchgfx/%.o: $(touchgfx_path)/%.cpp CM7/TouchGFX/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(cpp_compiler) \
		-MMD -MP $(cpp_compiler_options) $(cpp_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.cpp CM7/TouchGFX/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(cpp_compiler) \
		-MMD -MP $(cpp_compiler_options) $(cpp_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/touchgfx/%.o: $(touchgfx_path)/%.c CM7/TouchGFX/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(c_compiler) \
		-MMD -MP $(c_compiler_options) $(c_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.c CM7/TouchGFX/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(c_compiler) \
		-MMD -MP $(c_compiler_options) $(c_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.s CM7/TouchGFX/config/gcc/app.mk
	@echo Compiling ASM $<
	@mkdir -p $(@D)
	@$(assembler) \
		$(assembler_options) \
		$(patsubst %,-I %,$(os_include_paths)) \
		-c $< -o $@

ifeq ($(MAKECMDGOALS),build_executable)
$(firstword $(dependency_files)): CM7/TouchGFX/config/gcc/app.mk
	@rm -rf $(object_output_path)
-include $(dependency_files)
endif

_assets_: BitmapDatabase TextKeysAndLanguages

.PHONY: BitmapDatabase TextKeysAndLanguages

BitmapDatabase:
	@$(imageconvert_executable) -r $(asset_images_input) -w $(asset_images_output)

TextKeysAndLanguages:
	@mkdir -p $(asset_texts_output)/include/texts
	@ruby $(textconvert_script_path)/main.rb $(text_database) $(fontconvert_executable) $(asset_fonts_output) $(asset_texts_output) $(asset_fonts_input) TouchGFX $(text_converter_options)

_clean_:
	@echo Cleaning: $(board_name)
	@rm -rf $(build_root_path)
	# Do not remove gui_generated
	@rm -rf $(asset_images_output)
	@rm -rf $(asset_fonts_output)
	@rm -rf $(asset_texts_output)
	# Create directory to avoid error if it does not exist
	@mkdir -p $(asset_root_path)
	# Remove assets folder if it is empty (i.e. no gui_generated folder)
	@rmdir --ignore-fail-on-non-empty $(asset_root_path)
